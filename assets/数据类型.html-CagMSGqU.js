import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,d as t,e,b as s}from"./app-ahG6XCs9.js";const i={},r=s('<p>JavaScript数据类型分为两种，分别为基本数据类型和引用数据类型。</p><ul><li>基本数据类型：Number、String、Undefined、Null、Boolean、Symbol</li><li>引用数据类型：Object（Array、Date、Function、RegExp）</li></ul><h2 id="存放机制" tabindex="-1"><a class="header-anchor" href="#存放机制"><span>存放机制</span></a></h2><p>JavaScript 的数据类型存放机制涉及到栈（Stack）和堆（Heap）两个内存区域。</p><ul><li>基本数据类型（原始数据类型）的值直接存储在栈内存中，这些值是按值访问的，意味着当你将一个变量赋值给另一个变量时，实际上是在栈中创建了一个新的值副本。</li><li>引用数据类型（对象类型）的值存储在堆内存中，而变量本身存储的是一个指向堆内存中实际对象的引用（即内存地址）。当复制引用类型的变量时，复制的是引用本身，而不是实际的对象。因此，两个变量可能引用同一个对象，改变其中一个变量的对象属性，另一个也会受到影响，因为它们共享同一个内存地址。</li></ul><h2 id="数据类型判断" tabindex="-1"><a class="header-anchor" href="#数据类型判断"><span>数据类型判断</span></a></h2><ul><li>typeof：<code>typeof</code> 运算符返回一个字符串，表示操作数的类型 <ul><li>较好的基本数据类型检测（除了null），不能准确检测引用数据类型</li><li>object、array、date、regExp、null都会统一返回object</li></ul></li><li>instanceof：<code>instanceof</code> 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。 <ul><li>基于原型链的构造函数检测，可以较好区分引用还是基本数据类型</li><li>不能判断null和undefined</li><li>不是基于new关键字生成的基本数据类型，识别会为false</li></ul></li><li>Object.prototype.toString.call()：最全面的数据类型判断 <ul><li>调用底层Object.prototype.toString方法，是最全的数据类型判断方法</li></ul></li></ul><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h4>',8),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},k=s(`<table><thead><tr><th>数据类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>&quot;undefined&quot;</td></tr><tr><td>Null</td><td>&quot;object&quot;</td></tr><tr><td>Boolean</td><td>&quot;boolean&quot;</td></tr><tr><td>Number</td><td>&quot;number&quot;</td></tr><tr><td>BigInt</td><td>&quot;bigint&quot;</td></tr><tr><td>String</td><td>&quot;string&quot;</td></tr><tr><td>Symbol</td><td>&quot;symbol&quot;</td></tr><tr><td>Function</td><td>&quot;function&quot;</td></tr><tr><td>其他任何对象</td><td>&quot;object&quot;</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 以下判断内容皆成立 都为true</span>
<span class="token comment">// 数值</span>
<span class="token keyword">typeof</span> <span class="token number">37</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token number">3.14</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token number">42</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> Math<span class="token punctuation">.</span><span class="token constant">LN2</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token number">Infinity</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 尽管它是 &quot;Not-A-Number&quot; (非数值) 的缩写</span>
<span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Number 会尝试把参数解析成数值</span>
<span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;shoe&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 包括不能将类型强制转换为数字的值</span>

<span class="token keyword">typeof</span> <span class="token number">42n</span> <span class="token operator">===</span> <span class="token string">&quot;bigint&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 字符串</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;&quot;</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;bla&quot;</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">template literal</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 注意内容为数字的字符串仍是字符串</span>
<span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span> <span class="token comment">// typeof 总是返回一个字符串</span>
<span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span> <span class="token comment">// String 将任意值转换为字符串，比 toString 更安全</span>

<span class="token comment">// 布尔值</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token boolean">false</span> <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Boolean() 会基于参数是真值还是虚值进行转换</span>
<span class="token keyword">typeof</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 两次调用 !（逻辑非）运算符相当于 Boolean()</span>

<span class="token comment">// Symbols</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>iterator <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Undefined</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> declaredButUndefinedVariable <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> undeclaredVariable <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 对象</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 Array.isArray 或者 Object.prototype.toString.call</span>
<span class="token comment">// 区分数组和普通对象</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token operator">/</span>regex<span class="token operator">/</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 下面的例子令人迷惑，非常危险，没有用处。避免使用它们。</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 函数</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> Math<span class="token punctuation">.</span>sin <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h4>`,3),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> simpleStr <span class="token operator">=</span> <span class="token string">&quot;This is a simple string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;String created with constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myNonObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

simpleStr <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false，非对象实例，因此返回 false</span>
myString <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
newStr <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
myString <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>

myObj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true，尽管原型没有定义</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true，同上</span>
myNonObj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false，一种创建非 Object 实例的对象的方法</span>

myString <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token comment">//返回 false</span>

myDate <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
myDate <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
myDate <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring"><span>Object.prototype.toString</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString

<span class="token comment">// console.log(toString.call(xxx))</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">// [object String]</span>
<span class="token keyword">const</span> newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [object String]</span>

<span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// [object Boolean]</span>
<span class="token keyword">const</span> newFlag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// [object Boolean]</span>

<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">666</span> <span class="token comment">// [object Number]</span>
<span class="token keyword">const</span> newNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>

<span class="token keyword">const</span> undef <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// [object Undefined]</span>
<span class="token keyword">const</span> nulls <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// [object Null]</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// [object Object]</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// [object Array]</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[0-9]$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token comment">// [object RegExp]</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [object Date]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(b,y){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[n("a",u,[t("MDN typeof"),e(a)])]),k,n("p",null,[n("a",d,[t("MDN instanceof"),e(a)])]),m])}const w=o(i,[["render",v],["__file","数据类型.html.vue"]]),q=JSON.parse('{"path":"/web/JavaScript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"JavaScript-数据类型","lang":"zh-CN","frontmatter":{"title":"JavaScript-数据类型","icon":"object-group","excerpt":"世界上最宽阔的是海洋，比海洋更宽阔的是天空，比天空更宽阔的是人的心灵 --雨果（法国）","excerptLength":100,"category":["JavaScript"],"tag":["基础"],"description":"JavaScript数据类型分为两种，分别为基本数据类型和引用数据类型。 基本数据类型：Number、String、Undefined、Null、Boolean、Symbol 引用数据类型：Object（Array、Date、Function、RegExp） 存放机制 JavaScript 的数据类型存放机制涉及到栈（Stack）和堆（Heap）两个内...","head":[["meta",{"property":"og:url","content":"https://arisemarcher.github.io/blog/blog/web/JavaScript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"御神"}],["meta",{"property":"og:title","content":"JavaScript-数据类型"}],["meta",{"property":"og:description","content":"JavaScript数据类型分为两种，分别为基本数据类型和引用数据类型。 基本数据类型：Number、String、Undefined、Null、Boolean、Symbol 引用数据类型：Object（Array、Date、Function、RegExp） 存放机制 JavaScript 的数据类型存放机制涉及到栈（Stack）和堆（Heap）两个内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T09:53:11.000Z"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:modified_time","content":"2024-03-07T09:53:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript-数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T09:53:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"存放机制","slug":"存放机制","link":"#存放机制","children":[]},{"level":2,"title":"数据类型判断","slug":"数据类型判断","link":"#数据类型判断","children":[]}],"git":{"createdTime":1709801823000,"updatedTime":1709805191000,"contributors":[{"name":"arisemarcher","email":"2543061999@qq.com","commits":2}]},"readingTime":{"minutes":3.74,"words":1123},"filePathRelative":"web/JavaScript/数据类型.md","localizedDate":"2024年3月7日","autoDesc":true}');export{w as comp,q as data};
