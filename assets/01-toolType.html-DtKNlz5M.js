import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as p,b as n,d as o,e as c,a as l}from"./app-C7GBmG3V.js";const i={},r=n("p",null,"TypeScript提供了数种应用程序类型来促进常用类型转换。这些应用程序适用于全局。",-1),u={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html",target:"_blank",rel:"noopener noreferrer"},d=l(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>npm install typescript -g
tsc your-file.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="awaited-type" tabindex="-1"><a class="header-anchor" href="#awaited-type"><span><code>Awaited&lt;Type&gt;</code></span></a></h3><p>这种类型旨在模拟异步函数中的await或是Promise上的<code>.then()</code>方法，特别是他们递归解包Promise的方式</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// the Promise then resolve is string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Awaited<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// the Promise then the promise resolve is number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Awaited<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// the Promise is boolean or then resolve number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> Awaited<span class="token operator">&lt;</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="partial-type" tabindex="-1"><a class="header-anchor" href="#partial-type"><span><code>Partial&lt;Type&gt;</code></span></a></h3><p>Partial：部分的意思</p><p>构建一个类型，其中Type的所有属性都设置为可选。此应用程序将返回一个表示给定类型的所有子集的类型。</p><p>可以理解为你需要其中的一部分就可以使用该类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token operator">:</span> Todo<span class="token punctuation">,</span> fieldsToUpdate<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>fieldsToUpdate <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;organize desk&quot;</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">&quot;clear clutter&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span>
 *  description: &quot;throw out trash&quot;,
 *  title: &quot;organize desk&quot;
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">const</span> todo2 <span class="token operator">=</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  description<span class="token operator">:</span> <span class="token string">&quot;throw out trash&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// warning this is error</span>
<span class="token comment">// &#39;other&#39; does not exist in type &#39;Partial&lt;Todo&gt;&#39;</span>
<span class="token comment">// const todo3 = updateTodo(todo1, {</span>
<span class="token comment">//   description: &quot;throw out trash&quot;,</span>
<span class="token comment">//   other: &#39;the other message&#39;</span>
<span class="token comment">// })</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-type" tabindex="-1"><a class="header-anchor" href="#required-type"><span><code>Required&lt;Type&gt;</code></span></a></h3><p>构造一个类型，该类型由type设置为required的所有属性组成。与Partial相反</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj<span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// error</span>
<span class="token comment">// Property &#39;b&#39; is missing in type &#39;{ a: number; }&#39; but required in type &#39;Required&lt;Props&gt;&#39;</span>
<span class="token keyword">const</span> obj2<span class="token operator">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly-type" tabindex="-1"><a class="header-anchor" href="#readonly-type"><span><code>Readonly&lt;Type&gt;</code></span></a></h3><p>构造一个将type的所有属性设置为只读的类型，这意味着不能重新分配构造类型的属性</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Delete inactive users&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// error!!!</span>
<span class="token comment">// Cannot assign to &#39;title&#39; because it is a read-only property.ts(2540)</span>
todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个应用程序用于表示在运行时将失败的赋值表达式（即当试图重新分配冻结对象的属性）</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// Object.freezz</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">freeze</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="record-keys-type" tabindex="-1"><a class="header-anchor" href="#record-keys-type"><span><code>Record&lt;Keys, Type&gt;</code></span></a></h3><p>构造一个对象类型，其属性值为keys，属性值为type。此应用程序可用于将类型的属性映射到另一类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">CatInfo</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  breed<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">CartName</span> <span class="token operator">=</span> <span class="token string">&quot;miffy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;boris&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;mordred&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cats<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CartName<span class="token punctuation">,</span> CatInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  miffy<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;persian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  boris<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;Main Coon&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mordred<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;British Shorthair&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// const cats: Record&lt;CartName, CatInfo&gt;</span>
cats<span class="token punctuation">.</span>boris<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pick-type-keys" tabindex="-1"><a class="header-anchor" href="#pick-type-keys"><span><code>Pick&lt;Type, Keys&gt;</code></span></a></h3><p>通过type中选择一组属性key(字符串字面量或字符串字面量的并集)来构造类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TodoA</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>TodoA<span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;completed&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoA<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Clean room&quot;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// const todoA: TodoPreview</span>
todoA<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit-type-keys" tabindex="-1"><a class="header-anchor" href="#omit-type-keys"><span><code>Omit&lt;Type, Keys&gt;</code></span></a></h3><p>通过type中选择所有属性，然后删除键（字符串字面值或字符串字面值的并集）来构造类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TodoB</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  createdAt<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoBPreview</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>TodoB<span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoB<span class="token operator">:</span> TodoBPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Clean room&quot;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  createdAt<span class="token operator">:</span> <span class="token number">1615544252770</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TodoCPreview</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>TodoB<span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;createdAt&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> todoC<span class="token operator">:</span> TodoCPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;Go to school&#39;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// const todoB: TodoBPreview</span>
todoB<span class="token punctuation">;</span>

<span class="token comment">// const todoC: TodoCPreview</span>
todoC<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exclude-uniontype-excludemembers" tabindex="-1"><a class="header-anchor" href="#exclude-uniontype-excludemembers"><span><code>Exclude&lt;UnionType, ExcludeMembers&gt;</code></span></a></h3><p>通过从UnionType中排除所有可赋值给excludeMembers的联合成员来构造一个类型。可以理解为“非”</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">To</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type To = &quot;b&quot; | &quot;c&quot;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type T1 = &quot;c&quot;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type T2 = string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extract-type-union" tabindex="-1"><a class="header-anchor" href="#extract-type-union"><span><code>Extract&lt;Type, Union&gt;</code></span></a></h3><p>通过从type中提取可赋值给union的所有联合成员来构造一个类型。可以理解为交集合、“与”。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E0</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;f&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type E0 = &quot;a&quot;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E1</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type E1 = () =&gt; void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nonnullable-type" tabindex="-1"><a class="header-anchor" href="#nonnullable-type"><span><code>NonNullable&lt;Type&gt;</code></span></a></h3><p>通过从type中排除null和undefined来构造类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N0</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>
<span class="token comment">// type N0 = string | number</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N1</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>
<span class="token comment">// type N1 = string[]</span>

<span class="token comment">// 一下演示方法不标准 不推荐这样</span>
<span class="token keyword">interface</span> <span class="token class-name">nObj1</span> <span class="token punctuation">{</span>
  n1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  n2<span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">nObj2</span> <span class="token punctuation">{</span>
  n3<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N2</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>nObj1 <span class="token operator">|</span> nObj2<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type N2 = nObj1 | nObj2</span>
<span class="token keyword">const</span> the_n2<span class="token operator">:</span> <span class="token constant">N2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  n1<span class="token operator">:</span> <span class="token string">&#39;hello typescript&#39;</span><span class="token punctuation">,</span>
  n2<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  n3<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters-type" tabindex="-1"><a class="header-anchor" href="#parameters-type"><span><code>Parameters&lt;Type&gt;</code></span></a></h3><p>从函数类型type的形参中使用的类型构造元组类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span>  <span class="token function">f1</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token comment">// arg 代表只是一个对象 为了方便书写 a 和 b的类型而已</span>
<span class="token keyword">const</span> Fn1<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;it works&#39;</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// This is OK!</span>
<span class="token function">Fn1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 返回值无论是 boolean | string | number | null | undefined</span>
<span class="token comment">// 都是 type P0 = []</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P0</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P0 = []</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P1</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P1 = [s: string]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P2</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P2 = [arg: unknown]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P3</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P3 = [arg: {</span>
<span class="token comment">//   a: number;</span>
<span class="token comment">//   b: string;</span>
<span class="token comment">// }]</span>

<span class="token keyword">const</span> p3<span class="token operator">:</span> <span class="token constant">P3</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// This is Ok</span>
  <span class="token comment">// { a: 3, b: &#39;4&#39;} this is error only for on Arguments</span>
<span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P4</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P4 = unknown[]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P5</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P5 = never</span>

<span class="token comment">// type P6 = Parameters&lt;string&gt;;</span>
<span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.ts</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P7</span></span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
<span class="token comment">//   Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructorparameters-type" tabindex="-1"><a class="header-anchor" href="#constructorparameters-type"><span><code>ConstructorParameters&lt;Type&gt;</code></span></a></h3><p>从构造函数类型的类型构造元组或数组类型。它生成一个包含所有参数类型的元组类型（如果type不是函数，则生成类型never）</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C0</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>ErrorConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type C0 = [message?: string | undefined]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C1</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>FunctionConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type C1 = string[]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C2</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>RegExpConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type C2 = [pattern: string | RegExp, flags?: string | undefined]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C3</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type C3 = unknown[]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C4</span></span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) =&gt; any&#39;.</span>
  <span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="returntype-type" tabindex="-1"><a class="header-anchor" href="#returntype-type"><span><code>ReturnType&lt;Type&gt;</code></span></a></h3><p>构造由函数type的返回类型组成的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">Rf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R0</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R0 = string</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R1</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R1 = void</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R2</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R2 = unknown</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R3</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R3 = number[]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R4</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Rf1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R4 = {</span>
<span class="token comment">//   a: number;</span>
<span class="token comment">//   b: string;</span>
<span class="token comment">// }</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R5</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R5 = any</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R6</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type R6 = never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R7</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.ts</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T8</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
  <span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instancetype-type" tabindex="-1"><a class="header-anchor" href="#instancetype-type"><span><code>InstanceType&lt;Type&gt;</code></span></a></h3><p>构造由type中的构造函数的实例类型组成的类型</p><p>如此看来只是为了声明之后的类跟原有的保持一致？</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I0</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">I</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type I0 = I;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I1</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type I1 = any</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I2</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type I2 = never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I3</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;abstract new (...args: any) =&gt; any&#39;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) =&gt; any&#39;.</span>
  <span class="token comment">// Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thisparametertype-type" tabindex="-1"><a class="header-anchor" href="#thisparametertype-type"><span><code>ThisParameterType&lt;Type&gt;</code></span></a></h3><p>提取函数类型的this参数的类型，如果函数类型没有this参数则为未知。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">numberToString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Window]</span>
<span class="token comment">// this 为 Window 而且还报错</span>
<span class="token comment">// Expected 0 arguments, but got 1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numberToString</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3039</span>
<span class="token comment">//  this 为 Number {12345}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omitthisparameter-type" tabindex="-1"><a class="header-anchor" href="#omitthisparameter-type"><span><code>OmitThisParameter&lt;Type&gt;</code></span></a></h3><p>从Type中移除this参数。如果Type没有显式声明此参数，则结果只是Type。否则，将从type创建一个不带此参数的新函数类型。泛型被擦除，只有最后一个重载签名被传播到新函数类型中。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">const</span> fiveToHex<span class="token operator">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiveToHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 63</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thistype-type" tabindex="-1"><a class="header-anchor" href="#thistype-type"><span><code>ThisType&lt;Type&gt;</code></span></a></h3><p>此实用程序不返回转换后的类型。相反，它作为上下文这类类型的标记。注意，必须启用noImplicitThis标志才能使用这个实用程序。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ObjectDescription<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>
  methods<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeObject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>desc<span class="token operator">:</span> ObjectDescription<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> methods<span class="token operator">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">moveBy</span><span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span> <span class="token comment">// Strongly typed this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="固有的字符串操作类型" tabindex="-1"><a class="header-anchor" href="#固有的字符串操作类型"><span>固有的字符串操作类型</span></a></h3><h4 id="uppercase-stringtype" tabindex="-1"><a class="header-anchor" href="#uppercase-stringtype"><span><code>Uppercase&lt;StringType&gt;</code></span></a></h4><p>将字符串中的每个字符转换为大写</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ShoutyGreeting</span> <span class="token operator">=</span> Uppercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span>
           
<span class="token comment">// type ShoutyGreeting = &quot;HELLO, WORLD&quot;</span>
 
<span class="token keyword">type</span> <span class="token class-name">ASCIICacheKey<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ID-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uppercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">type</span> <span class="token class-name">MainID</span> <span class="token operator">=</span> ASCIICacheKey<span class="token operator">&lt;</span><span class="token string">&quot;my_app&quot;</span><span class="token operator">&gt;</span>

<span class="token comment">// type MainID = &quot;ID-MY_APP&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lowercase-stringtype" tabindex="-1"><a class="header-anchor" href="#lowercase-stringtype"><span><code>Lowercase&lt;StringType&gt;</code></span></a></h3><p>将字符串中的每个字符转换为大写</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">QuietGreeting</span> <span class="token operator">=</span> Lowercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span>
<span class="token comment">// type QuietGreeting = &quot;hello, world&quot;</span>
 
<span class="token keyword">type</span> <span class="token class-name">ASCIICacheKey<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">id-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Lowercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">type</span> <span class="token class-name">MainID</span> <span class="token operator">=</span> ASCIICacheKey<span class="token operator">&lt;</span><span class="token string">&quot;MY_APP&quot;</span><span class="token operator">&gt;</span>
<span class="token comment">// type MainID id-my_app</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="capitalize-stringtype" tabindex="-1"><a class="header-anchor" href="#capitalize-stringtype"><span><code>Capitalize&lt;StringType&gt;</code></span></a></h4><p>将字符串中的第一个字符转换为等效的大写字母。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LowercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span>LowercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type Greeting = &quot;Hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="uncapitalize-stringtype" tabindex="-1"><a class="header-anchor" href="#uncapitalize-stringtype"><span><code>Uncapitalize&lt;StringType&gt;</code></span></a></h4><p>将字符串中的第一个字符转换为等效的小写字符</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UppercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UncomfortableGreeting</span> <span class="token operator">=</span> Uncapitalize<span class="token operator">&lt;</span>UppercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function k(m,v){const s=e("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",u,[o("英文地址"),c(s)])]),d])}const g=a(i,[["render",k],["__file","01-toolType.html.vue"]]),h=JSON.parse('{"path":"/web/Ts/01-toolType.html","title":"TypeScript工具类型","lang":"zh-CN","frontmatter":{"title":"TypeScript工具类型","tags":["TypeScript"],"categories":["TypeScript"],"description":"TypeScript提供了数种应用程序类型来促进常用类型转换。这些应用程序适用于全局。 英文地址 Awaited<Type> 这种类型旨在模拟异步函数中的await或是Promise上的.then()方法，特别是他们递归解包Promise的方式 Partial<Type> Partial：部分的意思 构建一个类型，其中Type的所有属性都设置为可选。此...","head":[["meta",{"property":"og:url","content":"https://arisemarcher.github.io/blog/blog/web/Ts/01-toolType.html"}],["meta",{"property":"og:site_name","content":"御神"}],["meta",{"property":"og:title","content":"TypeScript工具类型"}],["meta",{"property":"og:description","content":"TypeScript提供了数种应用程序类型来促进常用类型转换。这些应用程序适用于全局。 英文地址 Awaited<Type> 这种类型旨在模拟异步函数中的await或是Promise上的.then()方法，特别是他们递归解包Promise的方式 Partial<Type> Partial：部分的意思 构建一个类型，其中Type的所有属性都设置为可选。此..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T08:32:35.000Z"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:modified_time","content":"2024-03-12T08:32:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript工具类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-12T08:32:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Awaited<Type>","slug":"awaited-type","link":"#awaited-type","children":[]},{"level":3,"title":"Partial<Type>","slug":"partial-type","link":"#partial-type","children":[]},{"level":3,"title":"Required<Type>","slug":"required-type","link":"#required-type","children":[]},{"level":3,"title":"Readonly<Type>","slug":"readonly-type","link":"#readonly-type","children":[]},{"level":3,"title":"Record<Keys, Type>","slug":"record-keys-type","link":"#record-keys-type","children":[]},{"level":3,"title":"Pick<Type, Keys>","slug":"pick-type-keys","link":"#pick-type-keys","children":[]},{"level":3,"title":"Omit<Type, Keys>","slug":"omit-type-keys","link":"#omit-type-keys","children":[]},{"level":3,"title":"Exclude<UnionType, ExcludeMembers>","slug":"exclude-uniontype-excludemembers","link":"#exclude-uniontype-excludemembers","children":[]},{"level":3,"title":"Extract<Type, Union>","slug":"extract-type-union","link":"#extract-type-union","children":[]},{"level":3,"title":"NonNullable<Type>","slug":"nonnullable-type","link":"#nonnullable-type","children":[]},{"level":3,"title":"Parameters<Type>","slug":"parameters-type","link":"#parameters-type","children":[]},{"level":3,"title":"ConstructorParameters<Type>","slug":"constructorparameters-type","link":"#constructorparameters-type","children":[]},{"level":3,"title":"ReturnType<Type>","slug":"returntype-type","link":"#returntype-type","children":[]},{"level":3,"title":"InstanceType<Type>","slug":"instancetype-type","link":"#instancetype-type","children":[]},{"level":3,"title":"ThisParameterType<Type>","slug":"thisparametertype-type","link":"#thisparametertype-type","children":[]},{"level":3,"title":"OmitThisParameter<Type>","slug":"omitthisparameter-type","link":"#omitthisparameter-type","children":[]},{"level":3,"title":"ThisType<Type>","slug":"thistype-type","link":"#thistype-type","children":[]},{"level":3,"title":"固有的字符串操作类型","slug":"固有的字符串操作类型","link":"#固有的字符串操作类型","children":[]},{"level":3,"title":"Lowercase<StringType>","slug":"lowercase-stringtype","link":"#lowercase-stringtype","children":[]}],"git":{"createdTime":1710232355000,"updatedTime":1710232355000,"contributors":[{"name":"arisemarcher","email":"2543061999@qq.com","commits":1}]},"readingTime":{"minutes":6.69,"words":2007},"filePathRelative":"web/Ts/01-toolType.md","localizedDate":"2024年3月12日","excerpt":"<p>TypeScript提供了数种应用程序类型来促进常用类型转换。这些应用程序适用于全局。</p>\\n<p><a href=\\"https://www.typescriptlang.org/docs/handbook/utility-types.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">英文地址</a></p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>npm install typescript -g\\ntsc your-file.ts\\n</code></pre></div>","autoDesc":true}');export{g as comp,h as data};
